import { Router } from "express";
import multer, { diskStorage } from "multer";
import { join, extname } from "path";
import path from "path";
import fs from "fs";
import { fileURLToPath } from "url";

const router = Router();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫
const baseUploadDir = join(__dirname, "../public/uploads");

// üõ† –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(baseUploadDir)) {
  fs.mkdirSync(baseUploadDir, { recursive: true });
}

// –§–∞–±—Ä–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞–ø–æ–∫
const makeStorage = (folderName = "") =>
  diskStorage({
    destination: (req, file, cb) => {
      const targetDir = join(baseUploadDir, folderName);
      // —Å–æ–∑–¥–∞—ë–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      fs.mkdirSync(targetDir, { recursive: true });
      cb(null, targetDir);
    },
    filename: (req, file, cb) => {
      const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
      cb(null, uniqueSuffix + extname(file.originalname));
    },
  });

// ‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±–µ–∑ –ø–∞–ø–∫–∏)
router.post("/", multer({ storage: makeStorage() }).single("file"), (req, res) => {
  if (!req.file) return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω" });

  const fileUrl = `/uploads/${req.file.filename}`;
  res.json({ url: fileUrl });
});

// ‚úÖ –ú–∞—Ä—à—Ä—É—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–∞–ø–∫–∏
router.post("/:folder", (req, res, next) => {
  const folder = req.params.folder;

  // –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ª–µ–∑–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã uploadDir
  if (folder.includes("..") || folder.includes("/")) {
    return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–∞–ø–∫–∏" });
  }

  const upload = multer({ storage: makeStorage(folder) }).single("file");

  upload(req, res, (err) => {
    if (err) return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ", details: err.message });
    if (!req.file) return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω" });

    const fileUrl = `/uploads/${folder}/${req.file.filename}`;
    res.json({ url: fileUrl });
  });
});

export default router;